/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TassadarServer_H
#define TassadarServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tassadar_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TassadarServerIf {
 public:
  virtual ~TassadarServerIf() {}
  virtual void version(std::string& _return) = 0;
  virtual void get_ocr(std::string& _return, const std::string& image) = 0;
  virtual void line_ocr(std::string& _return, const std::string& image) = 0;
};

class TassadarServerIfFactory {
 public:
  typedef TassadarServerIf Handler;

  virtual ~TassadarServerIfFactory() {}

  virtual TassadarServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TassadarServerIf* /* handler */) = 0;
};

class TassadarServerIfSingletonFactory : virtual public TassadarServerIfFactory {
 public:
  TassadarServerIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TassadarServerIf>& iface) : iface_(iface) {}
  virtual ~TassadarServerIfSingletonFactory() {}

  virtual TassadarServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TassadarServerIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TassadarServerIf> iface_;
};

class TassadarServerNull : virtual public TassadarServerIf {
 public:
  virtual ~TassadarServerNull() {}
  void version(std::string& /* _return */) {
    return;
  }
  void get_ocr(std::string& /* _return */, const std::string& /* image */) {
    return;
  }
  void line_ocr(std::string& /* _return */, const std::string& /* image */) {
    return;
  }
};


class TassadarServer_version_args {
 public:

  TassadarServer_version_args(const TassadarServer_version_args&);
  TassadarServer_version_args& operator=(const TassadarServer_version_args&);
  TassadarServer_version_args() {
  }

  virtual ~TassadarServer_version_args() throw();

  bool operator == (const TassadarServer_version_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TassadarServer_version_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TassadarServer_version_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TassadarServer_version_pargs {
 public:


  virtual ~TassadarServer_version_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TassadarServer_version_result__isset {
  _TassadarServer_version_result__isset() : success(false) {}
  bool success :1;
} _TassadarServer_version_result__isset;

class TassadarServer_version_result {
 public:

  TassadarServer_version_result(const TassadarServer_version_result&);
  TassadarServer_version_result& operator=(const TassadarServer_version_result&);
  TassadarServer_version_result() : success() {
  }

  virtual ~TassadarServer_version_result() throw();
  std::string success;

  _TassadarServer_version_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TassadarServer_version_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TassadarServer_version_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TassadarServer_version_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TassadarServer_version_presult__isset {
  _TassadarServer_version_presult__isset() : success(false) {}
  bool success :1;
} _TassadarServer_version_presult__isset;

class TassadarServer_version_presult {
 public:


  virtual ~TassadarServer_version_presult() throw();
  std::string* success;

  _TassadarServer_version_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TassadarServer_get_ocr_args__isset {
  _TassadarServer_get_ocr_args__isset() : image(false) {}
  bool image :1;
} _TassadarServer_get_ocr_args__isset;

class TassadarServer_get_ocr_args {
 public:

  TassadarServer_get_ocr_args(const TassadarServer_get_ocr_args&);
  TassadarServer_get_ocr_args& operator=(const TassadarServer_get_ocr_args&);
  TassadarServer_get_ocr_args() : image() {
  }

  virtual ~TassadarServer_get_ocr_args() throw();
  std::string image;

  _TassadarServer_get_ocr_args__isset __isset;

  void __set_image(const std::string& val);

  bool operator == (const TassadarServer_get_ocr_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const TassadarServer_get_ocr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TassadarServer_get_ocr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TassadarServer_get_ocr_pargs {
 public:


  virtual ~TassadarServer_get_ocr_pargs() throw();
  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TassadarServer_get_ocr_result__isset {
  _TassadarServer_get_ocr_result__isset() : success(false) {}
  bool success :1;
} _TassadarServer_get_ocr_result__isset;

class TassadarServer_get_ocr_result {
 public:

  TassadarServer_get_ocr_result(const TassadarServer_get_ocr_result&);
  TassadarServer_get_ocr_result& operator=(const TassadarServer_get_ocr_result&);
  TassadarServer_get_ocr_result() : success() {
  }

  virtual ~TassadarServer_get_ocr_result() throw();
  std::string success;

  _TassadarServer_get_ocr_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TassadarServer_get_ocr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TassadarServer_get_ocr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TassadarServer_get_ocr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TassadarServer_get_ocr_presult__isset {
  _TassadarServer_get_ocr_presult__isset() : success(false) {}
  bool success :1;
} _TassadarServer_get_ocr_presult__isset;

class TassadarServer_get_ocr_presult {
 public:


  virtual ~TassadarServer_get_ocr_presult() throw();
  std::string* success;

  _TassadarServer_get_ocr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TassadarServer_line_ocr_args__isset {
  _TassadarServer_line_ocr_args__isset() : image(false) {}
  bool image :1;
} _TassadarServer_line_ocr_args__isset;

class TassadarServer_line_ocr_args {
 public:

  TassadarServer_line_ocr_args(const TassadarServer_line_ocr_args&);
  TassadarServer_line_ocr_args& operator=(const TassadarServer_line_ocr_args&);
  TassadarServer_line_ocr_args() : image() {
  }

  virtual ~TassadarServer_line_ocr_args() throw();
  std::string image;

  _TassadarServer_line_ocr_args__isset __isset;

  void __set_image(const std::string& val);

  bool operator == (const TassadarServer_line_ocr_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const TassadarServer_line_ocr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TassadarServer_line_ocr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TassadarServer_line_ocr_pargs {
 public:


  virtual ~TassadarServer_line_ocr_pargs() throw();
  const std::string* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TassadarServer_line_ocr_result__isset {
  _TassadarServer_line_ocr_result__isset() : success(false) {}
  bool success :1;
} _TassadarServer_line_ocr_result__isset;

class TassadarServer_line_ocr_result {
 public:

  TassadarServer_line_ocr_result(const TassadarServer_line_ocr_result&);
  TassadarServer_line_ocr_result& operator=(const TassadarServer_line_ocr_result&);
  TassadarServer_line_ocr_result() : success() {
  }

  virtual ~TassadarServer_line_ocr_result() throw();
  std::string success;

  _TassadarServer_line_ocr_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TassadarServer_line_ocr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TassadarServer_line_ocr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TassadarServer_line_ocr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TassadarServer_line_ocr_presult__isset {
  _TassadarServer_line_ocr_presult__isset() : success(false) {}
  bool success :1;
} _TassadarServer_line_ocr_presult__isset;

class TassadarServer_line_ocr_presult {
 public:


  virtual ~TassadarServer_line_ocr_presult() throw();
  std::string* success;

  _TassadarServer_line_ocr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TassadarServerClient : virtual public TassadarServerIf {
 public:
  TassadarServerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TassadarServerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void version(std::string& _return);
  void send_version();
  void recv_version(std::string& _return);
  void get_ocr(std::string& _return, const std::string& image);
  void send_get_ocr(const std::string& image);
  void recv_get_ocr(std::string& _return);
  void line_ocr(std::string& _return, const std::string& image);
  void send_line_ocr(const std::string& image);
  void recv_line_ocr(std::string& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TassadarServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TassadarServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TassadarServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_version(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_ocr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_line_ocr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TassadarServerProcessor(::apache::thrift::stdcxx::shared_ptr<TassadarServerIf> iface) :
    iface_(iface) {
    processMap_["version"] = &TassadarServerProcessor::process_version;
    processMap_["get_ocr"] = &TassadarServerProcessor::process_get_ocr;
    processMap_["line_ocr"] = &TassadarServerProcessor::process_line_ocr;
  }

  virtual ~TassadarServerProcessor() {}
};

class TassadarServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TassadarServerProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TassadarServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TassadarServerIfFactory > handlerFactory_;
};

class TassadarServerMultiface : virtual public TassadarServerIf {
 public:
  TassadarServerMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TassadarServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TassadarServerMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TassadarServerIf> > ifaces_;
  TassadarServerMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TassadarServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void version(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->version(_return);
    }
    ifaces_[i]->version(_return);
    return;
  }

  void get_ocr(std::string& _return, const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_ocr(_return, image);
    }
    ifaces_[i]->get_ocr(_return, image);
    return;
  }

  void line_ocr(std::string& _return, const std::string& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->line_ocr(_return, image);
    }
    ifaces_[i]->line_ocr(_return, image);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TassadarServerConcurrentClient : virtual public TassadarServerIf {
 public:
  TassadarServerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TassadarServerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void version(std::string& _return);
  int32_t send_version();
  void recv_version(std::string& _return, const int32_t seqid);
  void get_ocr(std::string& _return, const std::string& image);
  int32_t send_get_ocr(const std::string& image);
  void recv_get_ocr(std::string& _return, const int32_t seqid);
  void line_ocr(std::string& _return, const std::string& image);
  int32_t send_line_ocr(const std::string& image);
  void recv_line_ocr(std::string& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
